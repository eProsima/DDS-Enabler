# Test description:
#   Run ddsenabler example action client against a Fibonacci action server.
#   The action client sends 3 consecutive goal requests and expects to receive
#   the corresponding feedbacks, status and results.
#   Domain 40 is set for ROS 2 nodes.

services:
  ddsenabler:
    image: ${DDSENABLER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsenabler
    networks:
      - std_net
    volumes:
      - ./config.yml:/config/config.yml
      - ../persistence:/persistence
    command: ./build/ddsenabler/examples/action/ddsenabler_example_action --announce-server false --persistence-path /persistence --config /config/config.yml --request-initial-wait 2

  fibonacci_server:
    image: ${DDSENABLER_COMPOSE_TEST_ROS2_DOCKER_IMAGE}
    container_name: fibonacci_server
    depends_on:
      - ddsenabler
    networks:
      - std_net
    environment:
      - ROS_DOMAIN_ID=40
    volumes:
      - ./../run_action_server_timeout.sh:/run_action_server_timeout.sh:ro
    entrypoint: ["/bin/bash", "/run_action_server_timeout.sh"]

networks:
  std_net:
  default:
    driver: none