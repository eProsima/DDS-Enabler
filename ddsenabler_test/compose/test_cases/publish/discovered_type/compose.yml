# Test description:
#   expected_types = 1
#   expected_topics = 1
#   timeout = 5
#   config_file_path_: allowed only /chatter topic
#   This test case checks the DDS Enabler is able to publish data in a topic that has previously been discovered.
#   The DDS Enabler is created after the listener, and before the first message is published an active wait of 2
#   seconds is introduced to let the enabler receive the topic and type information from the listener.
#   It is checked that the listener receives all messages (guaranteed by reliable reliability QoS, which is ROS 2 default).

services:

  # ENABLER
  ddsenabler:
    image: ${DDSENABLER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsenabler
    depends_on:
      - listener # Ensure listener is ready before ddsenabler starts so it can discover the type
    networks:
      - std_net
    volumes:
      - ./config.yml:/config/config.yml
      - ./samples:/samples
    command: ./build/ddsenabler/examples/ddsenabler_example --config /config/config.yml --timeout 5 --expected-types 1 --expected-topics 1 --publish-path /samples --publish-topic rt/chatter --publish-period 200 --publish-initial-wait 2000

  listener:
    image: ${DDSENABLER_COMPOSE_TEST_ROS2_DOCKER_IMAGE}
    container_name: listener
    networks:
      - std_net
    environment:
      - ROS_DOMAIN_ID=33
    volumes:
      - ../../../scripts:/scripts
    command: python3 /scripts/execute_and_validate_listener.py --timeout 5 --samples 5

networks:
  std_net:
  default:
    driver: none
