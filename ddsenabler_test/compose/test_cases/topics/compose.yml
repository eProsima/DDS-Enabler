# Test description:
#   This test getting the profile name for a XML participant using different ways.
#
# Test architecture:
#  topic0 -> non reliable
#  topic1 -> reliable transient_local
#
# Domain 1: using raw xml
#  - publisher  topic0
#  - subscriber topic1
# Domain 2: loading xml file from configuration file
#  - publisher  topic1
#  - subscriber topic2
# Domain 3: loading xml from env var
#  - publisher  topic2
#  - subscriber topic3
# Domain 4: loading xml from default file name
#  - publisher  topic3
#  - subscriber topic0
#

services:

  # ENABLER
  ddsenabler:
    image: ${DDSENABLER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsenabler
    networks:
      - std_net
    volumes:
      - ./config.json:/build/ddsenabler/examples/config.json
    command: ./build/ddsenabler/examples/ddsenabler_example 2 4 10

  # # DOMAIN 0
  # publisher_0:
  #   image: ${DDSENABLER_COMPOSE_TEST_DOCKER_IMAGE}
  #   container_name: publisher_0
  #   networks:
  #     - std_net
  #   volumes:
  #     - ../../scripts:/scripts
  #   command: python3 /scripts/execute_and_validate_publisher.py --exe build/fastdds_configuration_example/configuration --n-matches 1 --n-unmatches 0 --timeout 15 --args "--samples 1 --domain 0"

  # # DOMAIN 1
  # publisher_1:
  #   image: ${DDSENABLER_COMPOSE_TEST_DOCKER_IMAGE}
  #   container_name: publisher_1
  #   networks:
  #     - std_net
  #   volumes:
  #     - ../../scripts:/scripts
  #   command: python3 /scripts/execute_and_validate_publisher.py --exe build/fastdds_configuration_example/configuration --n-matches 0 --n-unmatches 0 --timeout 10 --args "--samples 1 --domain 1"


  # DOMAIN 0
  talker:
    image: ${DDSENABLER_COMPOSE_TEST_ROS2_DOCKER_IMAGE}
    container_name: talker
    depends_on:
      - ddsenabler
    networks:
      - std_net
    environment:
      - ROS_DOMAIN_ID=0
    volumes:
      - ../../scripts:/scripts
    command: ros2 topic pub /chatter std_msgs/msg/String "{}" --once --spin-time 3

networks:
  std_net:
  default:
    driver: none